/*
  This file is part of JOP, the Java Optimized Processor
    see <http://www.jopdesign.com/>

  Copyright (C) 2010, Benedikt Huber (benedikt.huber@gmail.com)

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
/* Autogenerated using ERB (tiny ruby, part of ruby distributions) */
/* erb LoadOnReturn.erb > LoadOnReturn.java */

package wcet.devel;

import com.jopdesign.sys.Const;
import com.jopdesign.sys.Native;

public class ObjectCacheLong {
    /**
	 * Set to false for the WCET analysis, true for measurement
	 */
    final static boolean MEASURE = true;
    static int ts, te, to;
    static int cs, ce;
    /* classes */
    public static class Obj1 {
        public Obj2 down;
        public Obj1 next;
        public String name;
        public long f1;
        public int f2;
        public long f3;
        public char f4;
        public double f5;        
        public static Obj1 create() {
            Obj1 obj1 = new Obj1();
            obj1.name = "foobar";
            obj1.f1 = 2342343423L;
            obj1.f2 = 3;
            obj1.f3 = 3;
            obj1.f4 = 'x';
            obj1.f5 = 3.1415;
            return obj1;
        }
    }
    public static class Obj2 {
        /* primitive array and fields */
        public int val;
        public long[] vals;
        public static Obj2 create() {
            Obj2 obj2 = new Obj2();
            obj2.val = 7;
            return obj2;
        }
    }
    /* static references */
    static Obj1 obj1a, obj1b;
    static Obj2 obj2a, obj2b;
    /* static arrays */
    static int ptr = 0;
    static Obj1[] obj1s;
    static Obj2[] obj2s;
    public static void init()
    {
        obj1a = Obj1.create(); 
        obj1b = Obj1.create();
        obj2a = Obj2.create();
        obj2b = Obj2.create();
        obj1s = new Obj1[2];
        obj1s[0] = obj1a;
        obj1s[1] = obj1b;
        obj2s = new Obj2[2];
        obj2s[0] = obj2a;
        obj2s[1] = obj2b;
    }
    public static void main(String[] args) {
        
        ts = Native.rdMem(Const.IO_CNT);
        te = Native.rdMem(Const.IO_CNT);
        to = te-ts;
        init();
        int v = invoke();
        System.out.print("Value: ");
        System.out.print(v);
        int val = te-ts-to;
        int cacheCost = ce-cs;
    }
	
    static int invoke() {
        if (MEASURE) te = Native.rdMem(Const.IO_CNT);
        return measure();
    }
	
    static int measure() {
        if (MEASURE) ts = Native.rdMem(Const.IO_CNT);
        int val = 0;
        //val += test0(obj1a);
        //val += test1(obj1a, obj1b);
        test2();
        /*        val += test2();
        val += test3();
        val += test4();
        val += test5();
        val += test6(); */
        return val;
    }
    static int test0(Obj1 o1)
    {
        return (int)o1.f3;
    }
    static int test1(Obj1 o1, Obj1 o2)
    {
        Obj1 o3 = o1;
        o1.next = o2;
        if(o1.f5 > 3) o1 = o1.next;
        o1.name = "This "+" is "+" a "+" small "+" world ";
        o1.f1=o3.f1;
        o1.f2=o3.f2;
        o1.f3=o3.f3;
        o1.f4=o3.f4;
        o1.f5=o3.f5;
        return((int)(o1.f1+o2.f1));        
    }
    static int test2()
    {
        System.out.println("Not found");
        return 1;
    }
	
}
